#textdomain wesnoth-After_the_Storm

# wmllint: local spelling ‹max

# This is an alternative version of the mainline AMLA that doesn't increase the
# overall XP requirement more than regular upgrade AMLAs, so as to prevent
# their XP pool from growing to the point it becomes impractical to keep
# leveling them up once the rest of the tree becomes available later on.
#define AMLA_VITALITY
    {CHARACTER_AMLA
    amla_vitality
    ()
    icons/amla-default.png ( _ "Vitality: hitpoints +3")
    (
        [effect]
            apply_to=hitpoints
            increase_total=3
            heal_full=yes
        [/effect]
    )}

    [+advancement]
        major_amla=no
        max_times=100
    [/advancement]
#enddef

# This is a fake AMLA displayed when the character's full AMLA tree is not
# available yet but all the episode-specific AMLAs have already been acquired.
# It doesn't have any effects other than causing the level-up prompt to display
# again until the player selects a different option.
#define AMLA_TREE_LOCK _REQUIRED_AMLAS
    [advancement]
        id=amla_tree_lock_ui
        description= _ "‹No more advancements available yet›"
        image= _ "misc/blank-hex.png~SCALE(60,60)"
        max_times=1
        # Unfortunately there's no way for us to require "all available AMLAs except amla_vitality", so
        # we require users to tell us the full list of unlocks for the current state here
        require_amla={_REQUIRED_AMLAS}
        [effect]
            apply_to=status
            add=amla_tree_lock_ui
        [/effect]
    [/advancement]
#enddef

#define AMLA_UI_HANDLER
    [event]
        id=amla_ui_handler_event
        name=post advance
        first_time_only=no
        [filter]
            status=amla_tree_lock_ui
        [/filter]

        # Revert dummy AMLA and set the unit's XP to maximum to return to the
        # level-up UI after we're done.

        {CLEAR_VARIABLE unit.status.amla_tree_lock_ui}
        {VARIABLE unit.experience $unit.max_experience}

        # We need to excise the AMLA by hand. Using wesnoth.remove_modifications
        # on Wesnoth 1.14.9 (and presumably earlier versions as well) can cause
        # unexpected recalculation of the unit's stats based on how traits and
        # objects would interact with AMLAs, when they normally *do not*. This
        # causes, e.g. Elynia's faerie fire addition to be boosted by the first
        # call to wesnoth.remove_modifications.

        {VARIABLE cleared_amla no}

        [for]
            array=unit.modifications.advancement
            reverse=yes
            [do]
                [if]
                    {VARIABLE_LEXICAL_EQUALS unit.modifications.advancement[$i].id amla_tree_lock_ui}
                    [then]
                        {CLEAR_VARIABLE unit.modifications.advancement[$i]}

                        {VARIABLE cleared_amla yes}

                        [break][/break]
                    [/then]
                [/if]
            [/do]
        [/for]

        {BUG_ON ({VARIABLE_BOOLEAN_NOT_EQUALS cleared_amla yes}) ()}

        {CLEAR_VARIABLE cleared_amla}

        {LOG_ATS ("[AMLA_TREE_LOCK_UI] Dummy advancement triggered and reverted")}

        [transient_message]
            caption= _ "Advancements Locked"
            message= _ "You have not unlocked all advancements for this unit yet. Continue playing the campaign to unlock more advancements."
        [/transient_message]

        # NOTE: The event handler may become recursive here if the player selects the
        #       dummy AMLA again.

        [unstore_unit]
            variable=unit
            find_vacant=no
        [/unstore_unit]
    [/event]
#enddef

#define AMLA_DEBUG_UI
    [set_menu_item]
        id=amla_debug
        description="I Hate Fun"

        [filter_location]
            [filter]
                side=1
            [/filter]
        [/filter_location]

        [command]
            [store_unit]
                [filter]
                    x,y=$x1,$y1
                [/filter]
                variable=u
            [/store_unit]

            {VARIABLE u.experience $u.max_experience}

            [unstore_unit]
                variable=u
                find_vacant=no
            [/unstore_unit]

            {CLEAR_VARIABLE u}

            [unit]
                side=1
                x,y=recall,recall
                type=Yeti
            [/unit]
        [/command]
    [/set_menu_item]
#enddef
