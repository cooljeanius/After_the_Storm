#textdomain wesnoth-After_the_Storm

# wmllint: local spelling ‹max

# This is an alternative version of the mainline AMLA that doesn't increase the
# overall XP requirement more than regular upgrade AMLAs, so as to prevent
# their XP pool from growing to the point it becomes impractical to keep
# leveling them up once the rest of the tree becomes available later on.
#define AMLA_VITALITY
    {CHARACTER_AMLA
    amla_vitality
    ()
    icons/amla-default.png ( _ "Vitality: hitpoints +3")
    (
        [effect]
            apply_to=hitpoints
            increase_total=3
            heal_full=yes
        [/effect]
    )}

    [+advancement]
        major_amla=no
        max_times=100
    [/advancement]
#enddef

# This is a fake AMLA displayed when the character's full AMLA tree is not
# available yet but all the episode-specific AMLAs have already been acquired.
# It doesn't have any effects other than causing the level-up prompt to display
# again until the player selects a different option.
#define AMLA_TREE_LOCK _REQUIRED_AMLAS
    [advancement]
        id=amla_tree_lock_ui
        description= _ "‹No more advancements available yet›"
        image= _ "misc/blank-hex.png~SCALE(60,60)"
        max_times=1
        # Unfortunately there's no way for us to require "all available AMLAs except amla_vitality", so
        # we require users to tell us the full list of unlocks for the current state here
        require_amla={_REQUIRED_AMLAS}
        [effect]
            apply_to=status
            add=amla_tree_lock_ui
        [/effect]
    [/advancement]
#enddef

#define AMLA_UI_HANDLER
    [event]
        id=amla_ui_handler_event
        name=post advance
        first_time_only=no
        [filter]
            status=amla_tree_lock_ui
        [/filter]

        # Revert dummy AMLA and set the unit's XP to maximum to return to the
        # level-up UI after we're done.

        {CLEAR_VARIABLE unit.status.amla_tree_lock_ui}
        {VARIABLE unit.experience $unit.max_experience}

        # We need to excise the AMLA by hand. Using wesnoth.remove_modifications
        # on Wesnoth 1.14.9 (and presumably earlier versions as well) can cause
        # unexpected recalculation of the unit's stats based on how traits and
        # objects would interact with AMLAs, when they normally *do not*. This
        # causes, e.g. Elynia's faerie fire addition to be boosted by the first
        # call to wesnoth.remove_modifications.

        {VARIABLE cleared_amla no}

        [for]
            array=unit.modifications.advancement
            reverse=yes
            [do]
                [if]
                    {VARIABLE_LEXICAL_EQUALS unit.modifications.advancement[$i].id amla_tree_lock_ui}
                    [then]
                        {CLEAR_VARIABLE unit.modifications.advancement[$i]}

                        {VARIABLE cleared_amla yes}

                        [break][/break]
                    [/then]
                [/if]
            [/do]
        [/for]

        {BUG_ON ({VARIABLE_BOOLEAN_NOT_EQUALS cleared_amla yes}) ()}

        {CLEAR_VARIABLE cleared_amla}

        {LOG_ATS ("[AMLA_TREE_LOCK_UI] Dummy advancement triggered and reverted")}

        [transient_message]
            caption= _ "Advancements Locked"
            message= _ "You have not unlocked all advancements for this unit yet. Continue playing the campaign to unlock more advancements."
        [/transient_message]

        # NOTE: The event handler may become recursive here if the player selects the
        #       dummy AMLA again.

        [unstore_unit]
            variable=unit
            find_vacant=no
        [/unstore_unit]
    [/event]
#enddef

#define AMLA_DEBUG_UI
    [set_menu_item]
        id=amla_debug
        description="I Hate Fun"

        [filter_location]
            [filter]
                side=1
            [/filter]
        [/filter_location]

        [command]
            [store_unit]
                [filter]
                    x,y=$x1,$y1
                [/filter]
                variable=u
            [/store_unit]

            {VARIABLE u.experience $u.max_experience}

            [unstore_unit]
                variable=u
                find_vacant=no
            [/unstore_unit]

            {CLEAR_VARIABLE u}

            [unit]
                side=1
                x,y=recall,recall
                type=Yeti
            [/unit]
        [/command]
    [/set_menu_item]
#enddef

#
# Cap a unit's maximum XP to a certain value at the start of an episode.
#
# If the unit's XP pool is greater than the specified amount, then it's
# forcefully capped with a hidden modification. Otherwise, it's left intact.
#
#define AMLA_XP_CAP _ID _MAX_XP
    [store_unit]
        [filter]
            id={_ID}
        [/filter]
        variable=temp_AXC.u
        kill=no
    [/store_unit]

    {VARIABLE_FROM_STRLEN temp_AXC.can_advance $temp_AXC.u.advances_to}

    [if]
        {VARIABLE_NUMERICAL_EQUALS temp_AXC.can_advance 0}
        [then]
            {VARIABLE temp_AXC.diff "$( {_MAX_XP} - $temp_AXC.u.max_experience )"}

            [if]
                {VARIABLE_NUMERICAL_LESS_THAN temp_AXC.diff 0}
                [then]
                    [object]
                        [filter]
                            id={_ID}
                        [/filter]

                        [effect]
                            apply_to=max_experience
                            increase=$temp_AXC.diff
                        [/effect]
                    [/object]
                [/then]
            [/if]
        [/then]
    [/if]

    #
    # Scale current XP to match the old status. We do this regardless of whether the
    # unit has unit type advancements or not (Durvan).
    #

    [if]
        {VARIABLE_NUMERICAL_NOT_EQUALS temp_AXC.u.variables.amla_xp_cap_old_ratio 0}
        [then]
            # Need to use [store_unit] to properly clear off the ratio attribute
            [store_unit]
                [filter]
                    id={_ID}
                [/filter]
                variable=temp_AXC.v
            [/store_unit]

            # Cap to max XP minus one to avoid awkward appearances of the
            # level up dialog, e.g. during cutscenes.
            {VARIABLE temp_AXC.v.experience "$(
                min(xp_pool - 1, round(xp_ratio * xp_pool)) where
                    xp_ratio = $temp_AXC.u.variables.amla_xp_cap_old_ratio,
                    xp_pool = $temp_AXC.v.max_experience
            )"}
            {CLEAR_VARIABLE temp_AXC.v.variables.amla_xp_cap_old_ratio}

            [unstore_unit]
                variable=temp_AXC.v
                find_vacant=no
            [/unstore_unit]
        [/then]
    [/if]

    {CLEAR_VARIABLE temp_AXC}
#enddef

#define AMLA_XP_CAP_TIER_2 _ID
    {AMLA_XP_CAP {_ID} {DIFF 125 150 175}}
#enddef

#define AMLA_XP_CAP_TIER_3 _ID
    {AMLA_XP_CAP {_ID} {DIFF 175 200 225}}
#enddef
