#textdomain wesnoth-After_the_Storm

#define NAIA_NOT_LOADED
#enddef

#
# Naia library
#

#ifhave ~add-ons/Naia/loader.cfg
{~add-ons/Naia/loader.cfg}

[binary_path]
    path="data/add-ons/Naia"
[/binary_path]
#else
#ifhave ./Naia/loader.cfg
#define NAIA_PREFIX
~add-ons/After_the_Storm/Naia#enddef
{~add-ons/After_the_Storm/Naia/loader.cfg}

[binary_path]
    path="data/add-ons/After_the_Storm/Naia"
[/binary_path]
#endif
#endif

#ifndef NAIA_VERSION
#error Naia or a Naia base library component is missing. Cannot continue loading this add-on.
#endif

#
# Local library
#

# LD provides a simpler, shorter way of including WML files by using only
# relative paths (to the add-on's directory).
#define LD __PATH__
{~add-ons/After_the_Storm/{__PATH__}}#enddef

{LD /mainline-strings.cfg}

#ifndef __WMLUNITS__

{LD /terrain-graphics}
{LD /terrain.cfg}
{LD /terrain-virtual.cfg}

#endif

#ifndef EDITOR

# LE includes WML files using paths relative to the currently selected
# episode's directory.
#ifdef CAMPAIGN_AFTER_THE_STORM_EPISODE_I
#define LE __PATH__
{~add-ons/After_the_Storm/episode1/{__PATH__}}#enddef
#endif
#ifdef CAMPAIGN_AFTER_THE_STORM_EPISODE_II
#define LE __PATH__
{~add-ons/After_the_Storm/episode2/{__PATH__}}#enddef
#endif
#ifdef CAMPAIGN_AFTER_THE_STORM_EPISODE_III
#define LE __PATH__
{~add-ons/After_the_Storm/episode3/{__PATH__}}#enddef
#endif

#ifndef __WMLUNITS__

# DIFF includes WML conditionally depending on the selected difficulty. I
# prefer this to mainline's ON_DIFFICULTY macro, which has an exceedingly
# long name for such an ubiquitous purpose. There is no whitespace (e.g.
# tabs, newlines, blanks) around the inclusions in order to avoid issues
# when the substitution is performed in middle of a string literal.
#ifdef EASY
#define DIFF _ON_EASY _ON_NORMAL _ON_HARD
{_ON_EASY}#enddef
#endif
#ifdef NORMAL
#define DIFF _ON_EASY _ON_NORMAL _ON_HARD
{_ON_NORMAL}#enddef
#endif
#ifdef HARD
#define DIFF _ON_EASY _ON_NORMAL _ON_HARD
{_ON_HARD}#enddef
#endif

# NOTE: do not change the order in which these files are preprocessing unless
# you are very sure of what you are doing.

[lua]
    code = <<
        PROJECT_Y_AFTER_THE_STORM_VERSION = '>>+"{LD dist/VERSION}"+<<'

        -- Global helper function table.
        helper = wesnoth.require "lua/helper.lua"

        -- Load local code files.
        for i, file in ipairs {
            'optimizations.lua',
            'overrides.lua',
            'theme.lua',

            'gui/bug.lua',
            'gui/character_action_dialog.lua',
            'gui/combo_info_dialog.lua',
            'gui/item_choice_dialog.lua',
            'gui/show_image.lua',
            'gui/top_message.lua',
            'gui/transient_message.lua',

            'After_the_Storm.lua',

            'version.lua',
        }
        do
            wesnoth.dofile('~add-ons/After_the_Storm/lua/' .. file)
        end
    >>
[/lua]

#endif

{LD /base-debug.cfg}

{LD /base-variables.cfg}
{LD /base-rc.cfg}
{LD /macros}

[+units]
    {LD /units}
[/units]

#ifndef __WMLUNITS__

{LD /ai}

{LD /themes}

#define MAP __FILE__
    map_data="{LE /maps/{__FILE__}}"
#enddef

#define MASK __FILE__
    mask="{LE /masks/{__FILE__}}"
#enddef

#define SHROUD_DATA __FILE__
    shroud_data="{LE /masks/{__FILE__}}"
#enddef

#
# Episode-specific data files
#

{LE characters.cfg}
{LE deaths.cfg}
{LE storytxt.cfg}
{LE scenarios}

#endif

#else

[editor_group]
    id = "wesnoth-UMC-After_the_Storm"
    name = _ "After the Storm (custom terrains)"
    icon = "group_custom"
[/editor_group]

# Get rid of this macro since it may be redefined by other add-ons
# loaded by the editor.
#undef LD

#endif

# EOF

# kate: indent-mode normal; encoding utf-8; space-indent on;
